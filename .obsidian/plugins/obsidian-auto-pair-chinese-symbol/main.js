/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    allowSelectEmbed: false,
    allowQuote: true,
};
class AutoPairPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.pairs = {
            "【": "】",
            "《": "》",
            "（": "）",
            "‘": "’",
            "“": "”",
            "「": "」",
        };
        this.change = (cm, obj) => {
            const symbol = obj.text[0];
            const cursorInfo = cm.getCursor();
            const pair = this.pairs[symbol];
            if (pair) {
                // 当有配对的符号时，替换后一个符号为配对的符号
                cm.replaceRange(pair, cursorInfo, cursorInfo, "*composeSymbolAdd");
                cm.setCursor(cursorInfo);
                return;
            }
            if (obj.origin === "+delete") {
                const pair = this.pairs[obj.removed[0]];
                if (pair === undefined) {
                    return;
                }
                const value = cm.getRange({ line: obj.from.line, ch: obj.from.ch }, { line: obj.from.line, ch: obj.from.ch + 1 });
                if (value !== pair) {
                    return;
                }
                const cur = cm.getCursor();
                cm.replaceRange("", { line: cur.line, ch: cur.ch }, { line: cur.line, ch: cur.ch + 1 }, "+delete");
            }
            // 处理双击【【后软件的自动处理
            if (obj.removed[0] === "【【") {
                const value = cm.getRange({ line: obj.from.line, ch: obj.from.ch + 2 }, { line: obj.from.line, ch: obj.from.ch + 4 });
                if (value === "】】") {
                    cm.replaceRange("", { line: cursorInfo.line, ch: cursorInfo.ch }, { line: cursorInfo.line, ch: cursorInfo.ch + 2 }, "+delete");
                }
            }
            if (this.settings.allowQuote && obj.origin !== "*composeSymbolAdd") {
                console.log(obj);
                if (obj.text[0] === "”") {
                    cm.replaceRange("“”", { line: cursorInfo.line, ch: cursorInfo.ch - 1 }, { line: cursorInfo.line, ch: cursorInfo.ch }, "*composeSymbol222");
                    cm.setCursor({ line: cursorInfo.line, ch: cursorInfo.ch });
                }
                if (obj.text[0] === "’") {
                    cm.replaceRange("‘", { line: cursorInfo.line, ch: cursorInfo.ch - 1 }, { line: cursorInfo.line, ch: cursorInfo.ch }, "*composeSymbol");
                    cm.setCursor({ line: cursorInfo.line, ch: cursorInfo.ch });
                }
            }
        };
        this.beforeChange = (cm, obj) => {
            const allowSelectEmbed = this.settings.allowSelectEmbed;
            const symbol = obj.text[0];
            const pair = this.pairs[symbol];
            if (pair === undefined) {
                return;
            }
            if (allowSelectEmbed && cm.somethingSelected()) {
                const selected = cm.getSelection();
                const replaceText = `${symbol}${selected}${pair}`;
                // @ts-ignore
                obj.update(null, null, [replaceText]);
            }
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new SampleSettingTab(this.app, this));
            this.registerCodeMirror(cm => {
                cm.on("change", this.change);
            });
            this.registerCodeMirror(cm => {
                cm.on("beforeChange", this.beforeChange);
            });
        });
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors(cm => {
            cm.off("beforeChange", this.beforeChange);
        });
        this.app.workspace.iterateCodeMirrors(cm => {
            cm.off("change", this.change);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class SampleSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "中文符号自动补齐" });
        new obsidian.Setting(containerEl)
            .setName("允许选中文字后在两边插入符号")
            .addToggle(text => text
            .setValue(this.plugin.settings.allowSelectEmbed)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.allowSelectEmbed = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("允许对下单引号和下双引号向前自动补齐")
            .addToggle(text => text.setValue(this.plugin.settings.allowQuote).onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.allowQuote = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = AutoPairPlugin;


/* nosourcemap */